estadoFinal = "estado final"
estadoNoFinal = "estado no aceptado"
estadoTrampa = "estado trampa"

def tokenId(lexema):
    caracterAceptado = {0:{'a':1,'b':1,'c':1,'d':1,'e':1,'f':1,'g':1,'h':1,
                               'i':1,'j':1,'k':1,'l':1,'m':1,'n':1,'o':1,'p':1,
                               'q':1,'r':1,'s':1,'t':1,'u':1,'v':1,'w':1,'x':1,
                               'y':1,'z':1,'A':1,'B':1,'C':1,'D':1,'E':1,'F':1,'G':1,'H':1,
                               'I':1,'J':1,'K':1,'L':1,'M':1,'N':1,'O':1,'P':1,
                               'Q':1,'R':1,'S':1,'T':1,'U':1,'V':1,'W':1,'X':1,
                               'Y':1,'Z':1},
                        1:{'a':1,'b':1,'c':1,'d':1,'e':1,'f':1,'g':1,'h':1,
                               'i':1,'j':1,'k':1,'l':1,'m':1,'n':1,'o':1,'p':1,
                               'q':1,'r':1,'s':1,'t':1,'u':1,'v':1,'w':1,'x':1,
                               'y':1,'z':1,'A':1,'B':1,'C':1,'D':1,'E':1,'F':1,'G':1,'H':1,
                               'I':1,'J':1,'K':1,'L':1,'M':1,'N':1,'O':1,'P':1,
                               'Q':1,'R':1,'S':1,'T':1,'U':1,'V':1,'W':1,'X':1,
                               'Y':1,'Z':1,'0':1,'1':1,'2':1,'3':1,'4':1,'5':1,'6':1,'7':1,
                               '8':1,'9':1},
                   }
    estado = 0
    estadoFinal = [1]
    for caracter in lexema:
        if caracter in caracterAceptado[estado]:
            estado = caracterAceptado[estado][caracter]
            print(estado)
        else:
            estado = -1
            print(estado)
            print(caracter)
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenNumero(lexema):
    vectorNumero = {0:{'0':1,'1':1,'2':1,'3':1,'4':1,'5':1,
                       '6':1,'7':1,'8':1,'9':1,'-':2},
                    1:{'0':1,'1':1,'2':1,'3':1,'4':1,'5':1,
                       '6':1,'7':1,'8':1,'9':1},
                    2:{'0':2,'1':2,'2':2,'3':2,'4':2,'5':2,
                       '6':2,'7':2,'8':2,'9':2}
                       }
    estado = 0
    estadoFinal = [1,2]
    for caracter in lexema:
        if caracter in vectorNumero[estado]:
            estado = vectorNumero[estado][caracter]
        else:
            estado = -1
            break 

    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenAsignacion(lexema):
    estado = 0
    estadoFinal =[1]
    vector = ['=']
##cantidad de estado 2
    if lexema in vector[estado]:
        estado = 1
    else:
        estado = -1

    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenPunto(lexema):
    estado = 0
    estadoFinal =[1]
    vector = ['.']
##cantidad de estado 2
    if lexema in vector[estado]:
        estado = 1
    else:
        estado = -1

    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenVar(lexema):
    estado = 0
    estadoFinal = [3]
    caracter = {0:{'v':1},1:{'a':2},2:{'r':3},3:{}}  
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal
def tokenProgram(lexema):
    estado = 0
    estadoFinal = [7]
    caracter = {0:{'p':1},1:{'r':2},2:{'o':3},3:{'g':4},4:{'r':5},
                5:{'a':6},6:{'m':7},7:{}}  
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenPuntoComa(lexema):
    estado = 0
    estadoFinal = [1]
    caracter = {0:{';':1},1:{}}  
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenBegin(lexema):
    estado = 0
    estadoFinal = [5]
    caracter = {0:{'b':1},1:{'e':2},2:{'g':3},3:{'i':4},4:{'n':5},
                5:{}}  
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenEnd(lexema):
    estado = 0
    estadoFinal = [3]
    caracter = {0:{'e':1},1:{'n':2},2:{'d':3},3:{}}  
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenEspacioBlanco(lexema):
    estado = 0
    estadoFinal = [0]
    caracter = {0:{' ':1},2:{}}  
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal
def tokenInt(lexema):
    estado = 0
    estadoFinal = [3]
    caracter = {0:{'i':1},1:{'n':2},2:{'t':3},3:{}}  
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenBool(lexema):
    estado = 0
    estadoFinal = [4]
    caracter = {0:{'b':1},1:{'o':2},2:{'o':3},3:{'l':4},4:{}}
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenTrue(lexema):
    estado = 0
    estadoFinal = [4]
    caracter = {0:{'t':1},1:{'r':2},2:{'u':3},3:{'e':4},4:{}}  
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenNot(lexema):
    estado = 0
    estadoFinal = [3]
    caracter = {0:{'n':1},1:{'o':2},2:{'t':3},3:{}}  
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenFalse(lexema):
    estado = 0
    estadoFinal = [5]
    caracter = {0:{'f':1},1:{'a':2},2:{'l':3},3:{'s':4},4:{'e':5},
                5:{}}  
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenGoto(lexema):
    estado = 0
    estadoFinal = [4]
    caracter = {0:{'g':1},1:{'o':2},2:{'t':3},3:{'o':4},4:{}}  
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenLet(lexema):
    estado = 0
    estadoFinal = [3]
    caracter = {0:{'l':1},1:{'e':2},2:{'t':3},3:{}}  
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenOperadoSuma(lexema):
    estado = 0
    estadoFinal = [1]
    caracter = {0:{'+':1},1:{}}  
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal
def tokenOperadoResta(lexema):
    estado = 0
    estadoFinal = [1]
    caracter = {0:{'-':1},1:{}}  
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal
def tokenOperadoProducto(lexema):
    estado = 0
    estadoFinal = [1]
    caracter = {0:{'*':1},1:{}}  
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenOperadoOr(lexema):
    estado = 0
    estadoFinal = [2]
    caracter = {0:{'o':1},1:{'r':2},2:{}}  
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado =-1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal
def tokenOperadoAnd(lexema):
    estado = 0
    estadoFinal = [3]
    caracter = {0:{'a':1},1:{'n':2},2:{'d':3},3:{}}  
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenIf(lexema):
    estado = 0
    estadoFinal = [2]
    caracter = {0:{'i':1},1:{'f':2},2:{}}
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenElse(lexema):
    estado = 0
    estadoFinal = [4]
    caracter = {0:{'e':1},1:{'l':2},2:{'s':3},3:{'e':4},4:{}}
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenDobleIgual(lexema):
    estado = 0
    estadoFinal = [2]
    caracter = {0:{'=':1},1:{'=':2},2:{}}
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal
def tokenCierre(lexema):
    estado = 0
    estadoFinal = [1]
    caracter = {0:{'<':1},1:{}}
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenMayor(lexema):
    estado = 0
    estadoFinal = [1]
    caracter = {0:{'>':1},1:{}}
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenMenor(lexema):
    estado = 0
    estadoFinal = [1]
    caracter = {0:{'<':1},1:{}}
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenMenorIgual(lexema):
    estado = 0
    estadoFinal = [2]
    caracter = {0:{'<':1},1:{'=':2},2:{}}
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenMayorIgual(lexema):
    estado = 0
    estadoFinal = [2]
    caracter = {0:{'>':1},1:{'=':2},2:{}}
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenDosPuntos(lexema):
    estado = 0
    estadoFinal = [1]
    caracter = {0:{':':1},1:{}}
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenAbreParentesis(lexema):
    estado = 0
    estadoFinal = [1]
    caracter = {0:{'(':1},1:{}}
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenCierraParentesis(lexema):
    estado = 0
    estadoFinal = [1]
    caracter = {0:{')':1},1:{}}
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal

def tokenSaltoLinea(lexema):
    estado = 0
    estadoFinal = [1]
    caracter = {0:{'\n':1},1:{}}
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal
def tokenTabulacion(lexema):
    estado = 0
    estadoFinal = [1]
    caracter = {0:{'\t':1},1:{}}
    for c in lexema:
        if c in caracter[estado]:
            estado = caracter[estado][c]
        else:
            estado = -1
            break
    if estado == -1:
        return estadoTrampa
    if estado in estadoFinal:
        return estadoFinal
    else:
        return estadoNoFinal
#########################PruebaToken#################    
res = ""
print(tokenId(res))
################
TOKENS_POSIBLES = [("id",tokenId),("numero",tokenNumero),("punto",tokenPunto),
                   ("var",tokenVar),("program",tokenProgram),("puntoComa",tokenPuntoComa),
                   ("asignacion",tokenAsignacion),("begin",tokenBegin),("end",tokenEnd),
                   ("espacioblanco",tokenEspacioBlanco),("int",tokenInt),
                   ("bool",tokenBool),("true",tokenTrue),("not",tokenNot),
                   ("false",tokenFalse),("goto",tokenGoto),("let",tokenLet),
                   ("suma",tokenOperadoSuma),("resta",tokenOperadoResta),
                   ("producto",tokenOperadoProducto),("or",tokenOperadoOr),
                   ("and",tokenOperadoAnd),("if",tokenIf),("else",tokenElse),
                   ("dobleigual",tokenDobleIgual),("cierre",tokenCierre),
                   ("menor",tokenMenor),("mayor",tokenMayor),
                   ("menorigual",tokenMenorIgual),("mayorigual",tokenMayorIgual),
                   ("abreparentesis",tokenAbreParentesis),
                   ("cierraparentesis",tokenCierraParentesis),
                   ("dospuntos",tokenDosPuntos)]


def lexer(codigo_fuente):
    tokens = []
    posicion_actual = 0
    while posicion_actual < len(codigo_fuente):
        comienzo_lexema = posicion_actual
        posibles_tokens = []
        posibles_tokens_con_un_caracter_mas = []
        lexema = ""
        var_aux_todos_en_estado_trampa = False
        
        while not var_aux_todos_en_estado_trampa:
            var_aux_todos_en_estado_trampa= True
            lexema = codigo_fuente[comienzo_lexema:posicion_actual+1]
            posibles_tokens = posibles_tokens_con_un_caracter_mas
            posibles_tokens_con_un_caracter_mas = []
            
            for(tipo,afd) in TOKENS_POSIBLES:  
                simulacion_afd = afd(lexema)
                if simulacion_afd == estadoFinal:
                    posibles_tokens_con_un_caracter_mas.append(tipo)
                    var_aux_todos_en_estado_trampa = False
                elif simulacion_afd == estadoNoFinal:
                    var_aux_todos_en_estado_trampa = False
            posicion_actual = posicion_actual +1 
        if len(posibles_tokens) == 0:
            token = ("Error",lexema)
            token.append(token)
        un_tipo_de_token = posibles_tokens[0]       
        token = (tipo,lexema)
        tokens.append(token)
    return tokens

print(lexer("program hola begin hola : let : hola = 123"))
